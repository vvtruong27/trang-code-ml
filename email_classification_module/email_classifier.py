import re
from email_patterns import EMAIL_PATTERNS
import logging

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EmailClassifier:
    """
    Ph√¢n lo·∫°i email d·ª±a tr√™n rule-based approach
    Categories: An to√†n (0), Nghi ng·ªù (1), Spam (2), Gi·∫£ m·∫°o (3)
    """
    
    def __init__(self):
        self.patterns = EMAIL_PATTERNS
        logger.info("‚úÖ Email classifier initialized successfully")
    
    def classify_email(self, email_data):
        """
        Ph√¢n lo·∫°i email d·ª±a tr√™n c√°c d·∫•u hi·ªáu nh·∫≠n bi·∫øt
        
        Args:
            email_data (dict): Email c·∫ßn ph√¢n lo·∫°i v·ªõi keys:
                - title: Ti√™u ƒë·ªÅ email
                - content: N·ªôi dung email  
                - from_email: Email ng∆∞·ªùi g·ª≠i
                
        Returns:
            dict: K·∫øt qu·∫£ ph√¢n lo·∫°i v·ªõi category, confidence, indicators, level
        """
        title = email_data.get('title', '')
        content = email_data.get('content', '')
        from_email = email_data.get('from_email', '')
        
        # Kh·ªüi t·∫°o k·∫øt qu·∫£ v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
        result = {
            'category': 'An to√†n',
            'confidence': 0,
            'indicators': [],
            'level': 'basic'
        }
        
        # Ki·ªÉm tra t·ª´ng lo·∫°i email theo th·ª© t·ª± ∆∞u ti√™n
        # 1. Ki·ªÉm tra Phishing tr∆∞·ªõc (nguy hi·ªÉm nh·∫•t)
        phishing_check = self._check_phishing(title, content, from_email)
        if phishing_check['isPhishing']:
            return {
                'category': 'Gi·∫£ m·∫°o',
                'confidence': phishing_check['confidence'],
                'indicators': phishing_check['indicators'],
                'level': phishing_check['level']
            }
        
        # 2. Ki·ªÉm tra Spam
        spam_check = self._check_spam(title, content, from_email)
        if spam_check['isSpam']:
            return {
                'category': 'Spam',
                'confidence': spam_check['confidence'],
                'indicators': spam_check['indicators'],
                'level': spam_check['level']
            }
        
        # 3. Ki·ªÉm tra Nghi ng·ªù
        suspicious_check = self._check_suspicious(title, content, from_email)
        if suspicious_check['isSuspicious']:
            return {
                'category': 'Nghi ng·ªù',
                'confidence': suspicious_check['confidence'],
                'indicators': suspicious_check['indicators'],
                'level': suspicious_check['level']
            }
        
        # 4. Ki·ªÉm tra An to√†n
        safe_check = self._check_safe(title, content, from_email)
        if safe_check['isSafe']:
            return {
                'category': 'An to√†n',
                'confidence': safe_check['confidence'],
                'indicators': ['Email t·ª´ ngu·ªìn tin c·∫≠y', 'Kh√¥ng c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù'],
                'level': 'basic'
            }
        
        # N·∫øu kh√¥ng r√µ r√†ng, m·∫∑c ƒë·ªãnh l√† Nghi ng·ªù v·ªõi confidence th·∫•p
        return {
            'category': 'Nghi ng·ªù',
            'confidence': 0.3,
            'indicators': ['Kh√¥ng th·ªÉ x√°c ƒë·ªãnh r√µ r√†ng'],
            'level': 'basic'
        }
    
    def _check_phishing(self, title, content, from_email):
        """Ki·ªÉm tra email Phishing (Gi·∫£ m·∫°o)"""
        patterns = self.patterns['phishing']
        indicators = []
        match_count = 0
        level = 'basic'
        
        # Ki·ªÉm tra domain gi·∫£ m·∫°o trong email g·ª≠i
        domain = from_email.split('@')[1] if '@' in from_email else ''
        
        # Ki·ªÉm tra brand spoofing (v√≠ d·ª•: Amaz0n, G00gle)
        for brand_pattern in patterns['basic']['brandSpoofing']:
            if brand_pattern.search(from_email) or brand_pattern.search(content):
                indicators.append('Gi·∫£ m·∫°o th∆∞∆°ng hi·ªáu v·ªõi k√Ω t·ª± s·ªë thay ch·ªØ')
                match_count += 2  # Tr·ªçng s·ªë cao cho brand spoofing
        
        # Ki·ªÉm tra phishing domains (.tk, .ml, .ga, .cf)
        for phish_domain in patterns['basic']['fromDomainPatterns']:
            if phish_domain.search(domain):
                indicators.append(f'Domain ƒë√°ng ng·ªù: {domain}')
                match_count += 2
        
        # Ki·ªÉm tra title patterns
        for pattern in patterns['basic']['titlePatterns']:
            if pattern.search(title):
                indicators.append('Ti√™u ƒë·ªÅ c√≥ d·∫•u hi·ªáu phishing')
                match_count += 1
        
        # Ki·ªÉm tra content patterns
        for pattern in patterns['basic']['contentPatterns']:
            if pattern.search(content):
                indicators.append('N·ªôi dung y√™u c·∫ßu x√°c minh kh·∫©n c·∫•p')
                match_count += 1
        
        # Ki·ªÉm tra advanced patterns n·∫øu c√≥
        if 'advanced' in patterns and match_count < 3:
            level = 'advanced'
            # Ki·ªÉm tra c√°c d·∫•u hi·ªáu tinh vi h∆°n
            if re.search(r'ph√≤ng.*k·∫ø.*to√°n', from_email, re.IGNORECASE) or \
               re.search(r'accounting', from_email, re.IGNORECASE):
                indicators.append('Gi·∫£ danh ph√≤ng ban n·ªôi b·ªô')
                match_count += 1
        
        confidence = min(match_count * 0.25, 1)
        
        return {
            'isPhishing': match_count >= 2,
            'confidence': confidence,
            'indicators': indicators,
            'level': level
        }
    
    def _check_spam(self, title, content, from_email):
        """Ki·ªÉm tra email Spam"""
        patterns = self.patterns['spam']
        indicators = []
        match_count = 0
        level = 'basic'
        
        # Ki·ªÉm tra basic spam patterns
        # 1. Title v·ªõi gi·∫£m gi√°, vi·∫øt hoa, emoji
        for pattern in patterns['basic']['titlePatterns']:
            if pattern.search(title):
                if re.search(r'[0-9]{2,}%', title, re.IGNORECASE):
                    indicators.append('Qu·∫£ng c√°o gi·∫£m gi√° l·ªõn')
                elif re.search(r'!!!', title):
                    indicators.append('S·ª≠ d·ª•ng nhi·ªÅu d·∫•u ch·∫•m than')
                elif re.search(r'üí∞|üéâ|üî•', title):
                    indicators.append('S·ª≠ d·ª•ng emoji spam')
                match_count += 1
        
        # 2. Content patterns
        for pattern in patterns['basic']['contentPatterns']:
            if pattern.search(content):
                if re.search(r'bit\.ly|tinyurl', content):
                    indicators.append('Ch·ª©a link r√∫t g·ªçn ƒë√°ng ng·ªù')
                    match_count += 2  # Tr·ªçng s·ªë cao cho shortened links
                else:
                    indicators.append('N·ªôi dung spam ƒëi·ªÉn h√¨nh')
                    match_count += 1
        
        # 3. From domain patterns
        domain = from_email.split('@')[1] if '@' in from_email else ''
        for pattern in patterns['basic']['fromDomainPatterns']:
            if pattern.search(domain):
                indicators.append('Domain spam th∆∞∆°ng m·∫°i')
                match_count += 1
        
        # Ki·ªÉm tra advanced spam (marketing tinh vi)
        if 'advanced' in patterns and match_count < 2:
            level = 'advanced'
            for pattern in patterns['advanced']['contentPatterns']:
                if pattern.search(content):
                    indicators.append('Marketing email v·ªõi trigger t√¢m l√Ω')
                    match_count += 1
        
        confidence = min(match_count * 0.3, 1)
        
        return {
            'isSpam': match_count >= 2,
            'confidence': confidence,
            'indicators': indicators,
            'level': level
        }
    
    def _check_suspicious(self, title, content, from_email):
        """Ki·ªÉm tra email Nghi ng·ªù"""
        patterns = self.patterns['suspicious']
        indicators = []
        match_count = 0
        level = 'basic'
        
        # 1. Ki·ªÉm tra title patterns (kh·∫©n, g·∫•p, urgent)
        for pattern in patterns['basic']['titlePatterns']:
            if pattern.search(title):
                indicators.append('T·∫°o √°p l·ª±c th·ªùi gian trong ti√™u ƒë·ªÅ')
                match_count += 1
        
        # 2. Ki·ªÉm tra content patterns
        for pattern in patterns['basic']['contentPatterns']:
            if pattern.search(content):
                if re.search(r'trong v√≤ng.*[0-9]+.*gi·ªù', content, re.IGNORECASE):
                    indicators.append('Y√™u c·∫ßu h√†nh ƒë·ªông trong th·ªùi gian ng·∫Øn')
                elif re.search(r'vui l√≤ng.*cung c·∫•p', content, re.IGNORECASE):
                    indicators.append('Y√™u c·∫ßu cung c·∫•p th√¥ng tin')
                else:
                    indicators.append('N·ªôi dung c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù')
                match_count += 1
        
        # 3. Ki·ªÉm tra domain patterns
        domain = from_email.split('@')[1] if '@' in from_email else ''
        for pattern in patterns['basic']['fromDomainPatterns']:
            if pattern.search(domain):
                indicators.append(f'Domain kh√¥ng ch√≠nh th·ª©c: {domain}')
                match_count += 1
        
        # 4. Ki·ªÉm tra l·ªói ch√≠nh t·∫£ (spelling errors)
        if 'spellingErrors' in patterns['basic']:
            full_text = title + ' ' + content
            for error_pattern in patterns['basic']['spellingErrors']:
                if error_pattern.search(full_text):
                    indicators.append('C√≥ l·ªói ch√≠nh t·∫£ ƒë√°ng ng·ªù')
                    match_count += 1
                    break
        
        confidence = min(match_count * 0.35, 1)
        
        return {
            'isSuspicious': match_count >= 2,
            'confidence': confidence,
            'indicators': indicators,
            'level': level
        }
    
    def _check_safe(self, title, content, from_email):
        """Ki·ªÉm tra email An to√†n"""
        patterns = self.patterns['safe']
        safe_score = 0
        
        # 1. Ki·ªÉm tra domain tin c·∫≠y
        domain = from_email.split('@')[1] if '@' in from_email else ''
        for pattern in patterns['requiredPatterns']['fromDomainPatterns']:
            if pattern.search(from_email):
                safe_score += 2  # Domain tin c·∫≠y c√≥ tr·ªçng s·ªë cao
                break
        
        # 2. Ki·ªÉm tra l·ªùi ch√†o chuy√™n nghi·ªáp
        for pattern in patterns['requiredPatterns']['professionalGreetings']:
            if pattern.search(content):
                safe_score += 1
                break
        
        # 3. Ki·ªÉm tra l·ªùi k·∫øt chuy√™n nghi·ªáp
        for pattern in patterns['requiredPatterns']['professionalClosings']:
            if pattern.search(content):
                safe_score += 1
                break
        
        # 4. ƒê·∫£m b·∫£o KH√îNG c√≥ c√°c t·ª´ nghi ng·ªù
        has_suspicious_words = False
        for pattern in patterns['mustNotHave']['suspiciousWords']:
            if pattern.search(content) or pattern.search(title):
                has_suspicious_words = True
                break
        
        # Email an to√†n n·∫øu:
        # - C√≥ domain tin c·∫≠y (score >= 2) V√Ä
        # - Kh√¥ng c√≥ t·ª´ nghi ng·ªù V√Ä
        # - C√≥ √≠t nh·∫•t 1 y·∫øu t·ªë chuy√™n nghi·ªáp kh√°c
        is_safe = safe_score >= 3 and not has_suspicious_words
        confidence = min(safe_score * 0.25, 1) if is_safe else 0
        
        return {
            'isSafe': is_safe,
            'confidence': confidence
        }
    
    def analyze_email(self, email_data):
        """Ph√¢n t√≠ch chi ti·∫øt m·ªôt email v√† in k·∫øt qu·∫£"""
        title = email_data.get('title', '')
        from_email = email_data.get('from_email', '')
        
        logger.info('\n=== PH√ÇN T√çCH EMAIL ===')
        logger.info(f'Ti√™u ƒë·ªÅ: {title}')
        logger.info(f'T·ª´: {from_email}')
        logger.info('---')
        
        result = self.classify_email(email_data)
        
        logger.info('K·∫æT QU·∫¢ PH√ÇN LO·∫†I:')
        logger.info(f'- Lo·∫°i: {result["category"]}')
        logger.info(f'- ƒê·ªô tin c·∫≠y: {result["confidence"]*100:.0f}%')
        logger.info(f'- Level: {result["level"]}')
        logger.info('- D·∫•u hi·ªáu nh·∫≠n bi·∫øt:')
        for indicator in result['indicators']:
            logger.info(f'  ‚Ä¢ {indicator}')
        logger.info('======================\n')
        
        return result 